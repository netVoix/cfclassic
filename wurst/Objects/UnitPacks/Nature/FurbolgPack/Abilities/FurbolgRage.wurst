package FurbolgRage

import ChannelAbilityPreset
import BuffObjEditing
import AttachmentPoints
import DamageDetection
import FurbolgConstants
import Orders
import Icons
import HashMap
import ClosureTimers
import ClosureEvents

public let RAGE_DURATION = 6.5
public let HP_THRESHOLD = 20.
public let FURBOLG_RAGE_ID = compiletime(ABIL_ID_GEN.next())
public let FURBOLG_RAGE_BONUS1_ID = compiletime(ABIL_ID_GEN.next())
public let FURBOLG_RAGE_BONUS2_ID = compiletime(ABIL_ID_GEN.next())
public let TOOLTIP1 = "Rage"
public let TOOLTIP2 = "Inceases armor, damage, attackspeed and HP regen"
public let RAGE_EFFECT_PATH = "Blood Ritual.mdx"
public let RAGE_BUFF_OBJ = compiletime(createDummyBuffObject(TOOLTIP1, TOOLTIP2, Icons.bTNBerserk, RAGE_EFFECT_PATH, AttachmentPoints.origin))

let rageBuffId = RAGE_BUFF_OBJ.abilId
let rageBuffMap = new HashMap<unit, CallbackSingle>()

@compiletime function furbolgRage()
	new AbilityDefinitionBeserk(FURBOLG_RAGE_ID)
	  ..presetCooldown(lvl -> 30)
	  ..presetManaCost(lvl -> 0)
	  ..presetCastingTime(lvl -> 0.1)
	  ..presetDurationNormal(lvl -> RAGE_DURATION)
	  ..presetDurationHero(lvl -> RAGE_DURATION)
	  ..presetAttackSpeedIncrease(lvl -> 2)

@compiletime function furbolgRageBonus1()
	new AbilityDefinitionHardenedSkin(FURBOLG_RAGE_BONUS1_ID)
	..presetManaCost(lvl -> 0)
	..presetIgnoredDamage(lvl -> 2000)
	..setRequirements("")

@compiletime function furbolgRageBonus2()
	new AbilityDefinitionRunedBracers(FURBOLG_RAGE_BONUS2_ID)
	..setItemAbility(false)
	..presetDamageReduction(lvl -> 0.9)

init
	addOnDamageFunc() ->
		let u = GetTriggerUnit()
		if u.getTypeId() == FURBOLG_PANDA_ID and u.getHP() < u.getMaxHP() / 100 * HP_THRESHOLD
			u.issueImmediateOrderById(OrderIds.berserk)
			
	EventListener.onCast(FURBOLG_RAGE_ID) (caster) ->
		caster.addAbility(rageBuffId)
		caster.addAbility(FURBOLG_RAGE_BONUS1_ID)
		caster.addAbility(FURBOLG_RAGE_BONUS2_ID)

		if rageBuffMap.has(caster)
			destroy rageBuffMap.get(caster)

		let cb = doAfter(RAGE_DURATION) ->
			if rageBuffMap.has(caster)
				rageBuffMap.remove(caster)
				caster.removeAbility(rageBuffId)
				caster.removeAbility(FURBOLG_RAGE_BONUS1_ID)
				caster.removeAbility(FURBOLG_RAGE_BONUS2_ID)
		rageBuffMap.put(caster, cb)
