package ScrollOfHasteBuff

import ChannelAbilityPreset
import BuffObjEditing
import Icons
import AttachmentPoints
import ClosureTimers
import ClosureEvents
import Abilities

public let HASTE_BUFF_NAME = "Haste"
public let HASTE_BUFF_TT = "This unit is moving faster"
public let HASTE_BUFF_EFF = Abilities.speedTarget
public let HASTE_AOE = 1000.
public let HASTE_BUFF_DURATION = 12.
public let SCROLL_OF_HASTE_ABIL_ID = compiletime(ABIL_ID_GEN.next())
public let HASTE_BUFF_OBJ = compiletime(createDummyBuffObject(HASTE_BUFF_NAME, HASTE_BUFF_TT, Icons.bTNBootsOfSpeed, HASTE_BUFF_EFF, AttachmentPoints.overhead))

@compiletime function haste()
    new ChannelAbilityPreset(SCROLL_OF_HASTE_ABIL_ID, 1, true)
    ..setHeroAbility(false)
    ..presetTargetTypes(Targettype.POINT)
    ..presetCooldown(lvl -> 0)
    ..presetManaCost(lvl -> 0)
    ..setLevelSkipRequirement(0)
    ..presetAreaofEffect(lvl -> HASTE_AOE)
    ..presetCastRange(lvl -> 9999)
    ..presetOption(Option.TARGETIMAGE, true)

let hasteBuffId = HASTE_BUFF_OBJ.abilId

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SPELL_CAST) ->
        let p = GetTriggerUnit().getOwner()
        let tpos = EventData.getSpellTargetPos()
        let sid = GetSpellAbilityId()
        if sid == SCROLL_OF_HASTE_ABIL_ID
            for u from CreateGroup()..enumUnitsInRange(tpos, HASTE_AOE)
                if u.isAllyOf(p) and not u.isType(UNIT_TYPE_STRUCTURE)
                    u.addAbility(hasteBuffId)
                    u.setMoveSpeed(9999)

                doAfter(HASTE_BUFF_DURATION) ->
                    u.removeAbility(hasteBuffId)
                    u.setMoveSpeed(u.getDefaultMovespeed())
