package ResqueStrike

import ResqueStrikeObjects
import ClosureTimers
import UnitHelpers

public interface LocationEffect
  function make(player owner, vec2 pos)

public interface CasterEffect
  function make(unit u)

public tuple resqueStrikeData(int killed, real damage)

public class ResqueStrike
  private var data = resqueStrikeData(0, 0)
  private unit caster
  private LocationEffect locationEffect
  private CasterEffect casterEffect

  construct(unit unitCaster, LocationEffect locEffect, CasterEffect castEffect)
    caster = unitCaster
    locationEffect = locEffect
    casterEffect = castEffect

  function cast(vec2 pos) 
    let owner = caster.getOwner()
    removeAbility(caster)
    locationEffect.make(owner, pos)
    casterEffect.make(caster)
    saveOwner(owner)
    doAfter(0.35) ->
      let newData = makeAction(caster, pos)
      updateData(newData)

  function getData() returns resqueStrikeData
    return data

  private function updateData(resqueStrikeData newData)
    data.damage = data.damage + newData.damage
    data.killed = data.killed + newData.killed

  private function removeAbility(unit caster)
    caster..removeAbility(RESQUE_STRIKE_ID)
          ..removeAbility(RESQUE_STRIKE_CASTER_EFFECT_ID)

  private function makeAction(unit caster, vec2 pos) returns resqueStrikeData
    let owner = caster.getOwner()
    var killed = 0
    var damage = 0.
    for u from CreateGroup()..enumUnitsInRange(pos, 700)
      if u.isEnemyOf(owner) and u.isAliveTrick() and u.isVulnerable()
        damage = damage + u.getLife()
        caster.damageTarget(u, 4444., true, false, ATTACK_TYPE_CHAOS, DAMAGE_TYPE_DEATH, WEAPON_TYPE_WHOKNOWS)
        caster.damageTarget(u, 4444., true, false, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_DEATH, WEAPON_TYPE_WHOKNOWS)
        killed++
    return resqueStrikeData(killed, damage)

  private function saveOwner(player owner)
    g4 = owner
